parent class
class Person():
     def __init__(self, name, age):
     	self.name = name
     	self.age = age
    
     def display(self):
     	print(self.name, self.age)
    
     # child class
 class Student(Person):
     def __init__(self, name, age, dob):
     	self.dob = dob
     	# inheriting the properties of parent class
     	super().__init__(name, age)
    
     def displayInfo(self):
     	print(self.name, self.age, self.dob)

 obj = Student("Mayank", 23, "16-03-2000")
 obj.display()
 obj.displayInfo()





 Python example to show the working of multiple
# inheritance

 class Base1(object):
 	def __init__(self):
 		self.str1 = "Geek1"
 		print("Base1")


 class Base2(object):
 	def __init__(self):
 		self.str2 = "Geek2"
 		print("Base2")


# class Derived(Base1, Base2):
# 	def __init__(self):

# 		# Calling constructors of Base1
# 		# and Base2 classes
# 		Base1.__init__(self)
# 		Base2.__init__(self)
# 		print("Derived")

# 	def printStrs(self):
# 		print(self.str1, self.str2)


# ob = Derived()
# ob.printStrs()






# A Python program to demonstrate multilevel 

# inheritance 

class Base(object):

	# Constructor
	def __init__(self, name):
		self.name = name

	# To get name
	def getName(self):
		return self.name


# Inherited or Sub class (Note Person in bracket)
class Child(Base):

	# Constructor
	def __init__(self, name, age):
		Base.__init__(self, name)
		self.age = age

	# To get name
	def getAge(self):
		return self.age

# Inherited or Sub class (Note Person in bracket)


class GrandChild(Child):

	# Constructor
	def __init__(self, name, age, address):
		Child.__init__(self, name, age)
		self.address = address

	# To get address
	def getAddress(self):
		return self.address


# Driver code
g = GrandChild("Geek1", 23, "Noida")
print(g.getName(), g.getAge(), g.getAddress())

class Person(object):

#  	# __init__ is known as the constructor
#  	def __init__(self, name, idnumber):
#          self.name = name
#          self.idnumber = idnumber

#  	def display(self):
#          print(self.name)
#          print(self.idnumber)



# obj = Person("Khalid", 257853)

# # accessing public data member
# print("Name: ", obj.name)
# print("Id: ", obj.idnumber)


# # calling public member function of the class
# obj.display()


"""
Protected Access Modifier:
    The members of a class that are declared protected are only accessible to a class derived 
    from it. Data members of a class are declared protected by adding a single underscore ‘_’ 
"""

# program to illustrate protected access modifier in a class

# super class
# class Student:
# 	
# 	# protected data members
# 	_name = None
# 	_roll = None
# 	_branch = None
# 	
# 	# constructor
# 	def __init__(self, name, roll, branch): 
# 		self._name = name
# 		self._roll = roll
# 		self._branch = branch
# 	
# 	# protected member function 
# 	def _displayRollAndBranch(self):

# 		# accessing protected data members
# 		print("Roll: ", self._roll)
# 		print("Branch: ", self._branch)


# # derived class
# class Geek(Student):

# 	# constructor 
# 	def __init__(self, name, roll, branch): 
#          Student.__init__(self, name, roll, branch) 
# 		
# 	# public member function 
# 	def displayDetails(self):
#          # accessing protected data members of super class 
#          print("Name: ", self._name) 
# 		 # accessing protected member functions of super class 
#          self._displayRollAndBranch()

# # creating objects of the derived class	 
# obj = Geek("Ali", 1706256, "Information Technology") 

# # calling public member functions of the class
# obj.displayDetails() 





"""
Private Access Modifier:
    The members of a class that are declared private are accessible within the class only, 
    Data members of a class are declared private by adding a double underscore ‘__’
"""

# program to illustrate private access modifier in a class

class Geek:
	
	# private members
	__name = None
	__roll = None
	__branch = None

	# constructor
	def __init__(self, name, roll, branch): 
		self.__name = name
		self.__roll = roll
		self.__branch = branch

	# private member function 
	def __displayDetails(self):
		# accessing private data members
		print("Name: ", self.__name)
		print("Roll: ", self.__roll)
		print("Branch: ", self.__branch)
	
	# public member function
	def accessPrivateFunction(self):
		# accessing private member function
		self.__displayDetails() 

	# getter method for name
	def get_name(self):
		self.__name 
        
	# setter method name
	def set_name(self , name):
		self.__name = name 

	# getter method for roll
	def get_roll(self):
		self.__roll
        
	# setter method roll
	def set_roll(self , roll):
		self.__roll = roll 

	# getter method for branch
	def get_branch(self):
		self.__branch
        
	# setter method branch
	def set_branch(self , branch):
		self.__branch = branch 

             
# creating object 
obj = Geek("Osama", 1706256, "Information Technology")

# calling public member function of the class
obj.accessPrivateFunction()

class A(object): 
# 	def __init__(self, x): 
# 		self.x = x 
# 	
# 	def getX(self): 
# 		return self.X 
# 	
# class B(object): 
# 	def __init__(self, x, y): 
# 		self.x = x 
# 		self.y = y 
# 	def getSum(self): 
# 		return self.X + self.y 


# # inherits from A 
# class C_A(A): 
# 	def isA(self): 
# 		return True
# 	
# 	def isB(self): 
# 		return False


# # inherits from B 
# class C_B(B): 
# 	def isA(self): 
# 		return False
# 	
# 	def isB(self): 
# 		return True

# # return required Object of C based on cond 
# def getC(cond): 
# 	if cond: 
# 		return C_A(1) 
# 	else: 
# 		return C_B(1,2) 

# # Object of C_A 
# ca = getC(True) 
# print(ca.isA()) 
# print(ca.isB()) 
# 	
# # Object of C_B 
# cb = getC(False) 
# print(cb.isA()) 
# print(cb.isB()) 


class A(object): 
	def __init__(self, x): 
		self.x = x 
	
	def getX(self): 
		return self.X 

# Based on condition C inherits 
# from A or it inherits from 
# object i.e. does not inherit A 
cond = True

# inherits from A or B 
class C(A if cond else object): 
	def isA(self): 
		return True

# Object of C_A 
ca = C(1) 
print(ca.isA()) 


Class for Computer Science Student
class CSStudent:
	stream = 'cse'				 # Class Variable (Static)
	def __init__(self,name,roll):
		self.name = name		 # Instance Variable
		self.roll = roll		 # Instance Variable

# Objects of CSStudent class
a = CSStudent('Geek', 1)
b = CSStudent('Nerd', 2)

print(a.stream) # prints "cse"
print(b.stream) # prints "cse"
print(a.name) # prints "Geek"
print(b.name) # prints "Nerd"
print(a.roll) # prints "1"
print(b.roll) # prints "2"

# Class variables can be accessed using class
# name also
print(CSStudent.stream) # prints "cse"


# To change the stream for all instances of the class we can change it 
# directly from the class
CSStudent.stream = 'mech'

print(a.stream) # prints 'mech'
print(b.stream) # prints 'mech'



